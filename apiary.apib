FORMAT: 1A

# Agricultural Weather Service


# Group Degree Days

## List Degree Days For Location [GET /degree_days{?lat,long,start_date,end_date,base_temp,upper_temp,method,units}]
Retrieve weather data for the specified coordinates and dates.

+ Parameters
    + lat: `45.0` (number, required) - north latitude
    + long: `90.0` (number, required) - west longitude
    + start_date: `2020-01-01` (string, optional) - the start date (default: first of year)
    + end_date: `2020-10-10` (string, optional) - end date (default: current date)
    + base_temp: `50` (number, optional) - base temperature, Fahrenheit
    + upper_temp: `86` (number, optional) - upper temperature limit, Fahrenheit
    + method: `sine` (string, optional) - degree day calculation method
    + units: `F` (string, optional) - temperature units (f/F or c/C)

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + info (object)
            + lat (string) - latitude of the request
            + long (string) - longitude of the request
            + start_date (string) - start date of the request
            + end_date (string) - end date of the request
            + days (number) - number of days of weather data returned
            + base_temp (number) - degree days base temp
            + upper_temp (number) - degree days upper cutoff temp
            + method (string) - degree days calculation method
            + units (string) - temperature units
        + data (array)
            + (object, optional)
                + date (string) - observation date
                + min_temp (number) - daily low temp
                + max_temp (number) - daily high temp
                + dd (number) - daily degree day accumulation
                + cum_dd (number) - cumulative degree days

## Degree Day Info [GET /degree_days/info]
Get parameter ranges available in the database

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + date_range (array) - min, max
        + lat_range (array) - min, max
        + long_range (array) - min, max
        + dd_methods (array) - list of methods


# Group Evapotranspirations

## List Evapotranspirations [GET /evapotranspirations{?lat,long,start_date,end_date}]
Retrieve ET data for the specified coordinates and dates.

+ Parameters
    + lat: 45.0 (number, required) - north latitude
    + long: 90.0 (number, required) - west longitude
    + start_date: `2020-01-01` (string, required) - start date
    + end_date: `2020-10-10` (string, optional) - end date

+ Response 200 (application/json; charset=utf-8)
    + Attributes (array)
        + (object, optional)
            + date: `2020-01-01` (string)
            + value: 0.15 (number)

## Get evapotranspiration map image url [GET /evapotranspirations/{date}]
Retrieve the ET map for a given date.

+ Parameters
    + date: `2020-01-01` (string, required) - the desired date

+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + map: `path/to/map.png` (string, required)

## Get all evapotranspirations for date [GET /evapotranspirations/all_for_date{?date}]
Retrieve all ET data for the specified date.

+ Parameters
    + date: `2020-01-01` (string, required) - the date

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + date (string)
        + status (string)
        + info (object, optional)
            + lat_range (array)
            + long_range (array)
            + value_range (array)
            + value_unit (string)
        + data (array)
            + (object, optional)
                + lat (number)
                + long (number)
                + value (number)

## Evapotranspiration database info [GET /evapotranspirations/info]
Get parameter ranges available in the database

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + date_range (array) - min, max
        + lat_range (array) - min, max
        + long_range (array) - min, max
        + value_range (array) - min, max


# Group Insolations

## Get insolation map image url [GET /insolations/{date}]
Retrieve insolation map for a given date

+ Parameters
    + date: `2016-01-07` (string, required) - the desired date

+ Response 200 (application/json; charset=utf-8)
    + Attributes
        + map: `path/to/map.png` (string, required)

## Get all insolations for date [GET /insolations/all_for_date{?date}]
Retrieve all insolation data for the specified date.

+ Parameters
    + date: `2020-01-01` (string, required) - the date

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + date (string)
        + status (string)
        + info (object, optional)
            + lat_range (array)
            + long_range (array)
            + value_range (array)
            + value_unit (string)
        + data (array)
            + (object, optional)
                + lat (number)
                + long (number)
                + value (number)

## Insolation database info [GET /insolations/info]
Get parameter ranges available in the database

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + date_range (array) - min, max
        + lat_range (array) - min, max
        + long_range (array) - min, max
        + value_range (array) - min, max


# Group Weather

## Get weather data [GET /weather{?lat,long,start_date,end_date}]
Returns weather data for location and date range

+ Parameters
    + lat: 45 (number, required) - north latitude
    + long: 90 (number, required) - west longitude
    + start_date: `2020-01-01` (string, required) - start date
    + end_date: `2020-10-10` (string, required) - end date

+ Response 200 (application/json; charset=utf-8)
    + Attributes (array)
        + (object)
            + date (string)
            + min_temp (number)
            + avg_temp (number)
            + max_temp (number)
            + pressure (number)

# Group Pest Forecasts

## Get forecast data for pest [GET /pest_forecasts{?pest,start_date,end_date}]
Returns pest forecast data for entire grid for pest and date range

+ Parameters
    + pest: potato_blight_dsv (string, required) - column name of pest data
    + start_date: `2020-01-01` (string, optional) - defaults to 7 days ago
    + end_date: `2020-10-10` (string, optional) - defaults to today

+ Response 200 (application/json; charset=utf-8)
    + Attributes (object)
        + pest (string)
        + status (string)
        + info (object, optional)
            + start_date (string)
            + end_date (string)
            + days (number)
            + lat_range (array)
            + long_range (array)
        + data (array)
            + (object)
                + grid_key (string)
                + lat (string)
                + long (string)
                + total (number)
                + avg (number)
                + freeze (boolean)
